<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen - CSS Walking Duck Animation ðŸ¦†</title>
  <link rel="stylesheet" href="./style.css">

  
<div id="container">
  <button class="face-button">
    <a href="/final/index" class="face-container"></a>
    <span class="face-container">
      <span class="eye left"></span>
      <span class="eye right"></span>
      <span class="mouth"></span>
    </span>
    </a>
  </button>
</div>

<!--button class="mute mute--active">
  <svg class="mute__icon" viewBox="0 0 24 24">
    <path fill="#ffffff" d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z"></path>
  </svg>
</button-->
<!-- partial -->
  <!--script  type="text/javascript">
  const quack = new Audio(
'https://freesound.org/data/previews/418/418509_5632532-lq.mp3');

const duck = document.querySelector('.duck');
const mute = document.querySelector('.mute');
const play = () => {
  quack.
  play().
  then(() => {
    const dur = Math.floor(Math.random() * 5000);
    duck.style.setProperty('--wing', dur);
    if (quack.muted)
    duck.style.setProperty('--wing', 0);
    setTimeout(play, dur);
  }).
  catch(e => {
    console.warn('Could not get quacking yet as no interaction ðŸ¦† ðŸ˜­');
  });
};
play();
quack.muted = true;
mute.addEventListener('click', () => {
  quack.muted = !quack.muted;
  if (quack.muted) {
    mute.classList.add('mute--active');
  } else {
    mute.classList.remove('mute--active');
    play();
  }
});
</script-->
<style>
  * {
	 box-sizing: border-box;
}
 *::before, *::after {
	 box-sizing: border-box;
}
 body {
	 display: flex;
	 align-items: center;
	 justify-content: center;
	 margin: 0;
	 min-height: 100vh;
	 background: #fbf6e6;
}
 #container {
	 display: flex;
	 align-items: center;
	 justify-content: center;
	 width: 6.25rem;
	 height: 6.25rem;
}
 button {
	 position: relative;
   left: 450px;
   bottom: 200px;
	 display: inline-block;
	 cursor: pointer;
	 outline: none;
	 border: 0;
	 vertical-align: middle;
}
 button.face-button {
	 width: 6.25rem;
	 height: 6.25rem;
	 border-radius: 50%;
	 background: #fdda5f;
	 box-shadow: inset 2px -4px 18px #fd9744;
}
 .face-container {
	 position: relative;
	 display: block;
	 width: 40px;
	 height: 20px;
	 margin: auto;
}
 .eye {
	 position: absolute;
	 height: 0.5rem;
	 width: 0.5rem;
	 background: #2a2927;
	 border-radius: 50%;
	 animation: eyeBlink 3200ms linear infinite;
}
 .eye.left {
	 left: 0;
}
 .eye.right {
	 left: 2rem;
}
 .mouth {
	 position: absolute;
	 top: 1.125rem;
	 left: 0.8rem;
	 width: 1rem;
	 height: 0.125rem;
	 background: #2a2927;
	 border-radius: 0;
}
 .eye, .mouth {
	 box-shadow: inset 1px 2px 4px #121110;
}
 .face-button:hover .mouth, .face-button:active .mouth {
	 left: 1rem;
	 width: 0.5rem;
	 height: 0.4rem;
	 border-radius: 1rem 1rem 0.125rem 0.125rem;
}
 .face-button:hover .eye, .face-button:active .eye {
	 height: 0.375rem;
	 width: 0.375rem;
	 box-shadow: 0 0 0 0.25rem #fff;
}
 @keyframes eyeBlink {
	 0%, 30%, 36%, 100% {
		 transform: scale(1);
	}
	 32%, 34% {
		 transform: scale(1, 0);
	}
}
</style>
<script type="text/javascript">
const faceButton = document.querySelector('.face-button');
const faceContainer = document.querySelector('.face-container');
const containerCoords = document.querySelector('#container');
const mouseCoords = containerCoords.getBoundingClientRect();

faceButton.addEventListener('mousemove', function(e) {
  const mouseX = e.pageX - containerCoords.offsetLeft;
  const mouseY = e.pageY - containerCoords.offsetTop;
  
  TweenMax.to(faceButton, 0.3, {
     x: (mouseX - mouseCoords.width / 2) / mouseCoords.width * 50,
     y: (mouseY - mouseCoords.height / 2) / mouseCoords.width * 50,
     ease: Power4.easeOut
   })
});

faceButton.addEventListener('mousemove', function(e) {
  const mouseX = e.pageX - containerCoords.offsetLeft;
  const mouseY = e.pageY - containerCoords.offsetTop;
  
  TweenMax.to(faceContainer, 0.3, {
     x: (mouseX - mouseCoords.width / 2) / mouseCoords.width * 25,
     y: (mouseY - mouseCoords.height / 2) / mouseCoords.width * 25,
     ease: Power4.easeOut
   })
});

faceButton.addEventListener('mouseenter', function(e) {
  TweenMax.to(faceButton, 0.3, {
    scale: 0.975
  })
});

faceButton.addEventListener('mouseleave', function(e) {
  TweenMax.to(faceButton, 0.3, {
    x: 0,
    y: 0,
    scale: 1
  })
  
  TweenMax.to(faceContainer, 0.3, {
    x: 0,
    y: 0,
    scale: 1
  })
});
</script>

<style>
    :root {
  --color-yellow: #ffed02;
  --color-light-orange-1: #fece00;
  --color-light-orange-2: #fcaa1d;
  --color-orange: #f57a00;
  --color-blue-1: #48befd;
  --color-blue-2: #3ba5f1;
  --duck-speed: 1s;
  --duck-speed-half: calc(var(--duck-speed) / 2);
}

*,
*::after,
*::before {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  background-color: var(--color-blue-1);
  height: 100vh;
  display: grid;
  place-content: center;
  overflow: hidden;
}

.duck {
  display: flex;
  flex-direction: column;
  position: relative;
}
.duck__wrapper {
  display: grid;
  place-content: center;
}
.duck__head {
  align-self: flex-end;
  width: 6rem;
  height: 4rem;
  border-radius: 8rem 8rem 0 0;
  background-color: var(--color-yellow);
  position: relative;
  transform: translateY(1px);
  z-index: 1;
}
.duck__head::after, .duck__head::before {
  content: "";
  position: absolute;
  border-radius: 1rem;
  background-color: var(--color-yellow);
  width: 0.4rem;
  height: 2rem;
  top: 0;
}
.duck__head::after {
  left: 44%;
  transform: translate(-50%, -50%) rotate(-30deg);
}
.duck__head::before {
  left: 45%;
  transform: translate(-50%, -50%) rotate(10deg);
}
.duck__white {
  position: absolute;
  top: 0.8rem;
  left: 0.8rem;
  width: 0.6rem;
  height: 1.3rem;
  transform: rotate(40deg);
  border-radius: 50%;
  border-left: 0.2rem solid #fff;
}
.duck__eye {
  position: absolute;
  bottom: 0.2rem;
  right: 1rem;
  width: 0.8rem;
  height: 0.8rem;
  border-radius: 50%;
  background-color: #000;
  animation: eye-animation 1s infinite linear;
}
.duck__eye--shadow {
  position: absolute;
  bottom: -0.5rem;
  right: 2rem;
  width: 0.8rem;
  height: 0.8rem;
  border-radius: 50%;
  background-color: var(--color-light-orange-2);
  z-index: 1;
}
.duck__mouth {
  position: absolute;
  right: 0;
  top: 40%;
  width: 1rem;
  height: 1.2rem;
  transform: translate(90%, -50%);
  clip-path: polygon(0 0, 100% 40%, 100% 60%, 0% 100%);
  border-radius: 0 1rem 1rem 0;
  background-color: var(--color-orange);
}
.duck__body {
  width: 9.5rem;
  height: 5rem;
  border-radius: 1rem 0 16rem 16rem;
  background-color: var(--color-yellow);
  position: relative;
  overflow: hidden;
}
.duck__body::after {
  content: "";
  position: absolute;
  width: 105%;
  height: 200%;
  left: 50%;
  top: -95%;
  transform: translate(-50%, 0.02rem) rotate(-6deg);
  border-radius: 50%;
  border-bottom: 1rem solid var(--color-light-orange-2);
}
.duck__wing {
  position: absolute;
  left: 0.6rem;
  top: 55%;
  width: 4rem;
  height: 2.4rem;
  border-radius: 1rem 1rem 4rem 4rem;
  background-color: var(--color-light-orange-1);
  transform: translate(0, -50%);
  transform-origin: right;
  animation: wing-animation var(--duck-speed) linear infinite;
  z-index: 1;
}
.duck__foot {
  position: absolute;
  width: 0.6rem;
  height: 2rem;
  background-color: var(--color-orange);
  z-index: -1;
}
.duck__foot::after {
  content: "";
  position: absolute;
  width: 2rem;
  height: 0.6rem;
  bottom: 0rem;
  left: -0.5rem;
  background-color: var(--color-orange);
  border-radius: 1rem;
}
.duck__foot--1, .duck__foot--2 {
  left: 40%;
  bottom: 0;
  transform: translate(-50%, 80%);
}
.duck__foot--1 {
  animation: foot-ans var(--duck-speed) linear infinite;
}
.duck__foot--2 {
  animation: foot-ans var(--duck-speed) var(--duck-speed-half) linear infinite;
}

.surface {
  position: absolute;
  bottom: -1.9rem;
  left: 55%;
  transform: translateX(-50%);
  background-color: var(--color-blue-2);
  width: 8rem;
  height: 0.5rem;
  border-radius: 1rem;
  animation: surface-animation var(--duck-speed-half) linear infinite;
}

@keyframes surface-animation {
  0%, 100% {
    transform: translateX(-50%) scaleX(0.9);
  }
  50% {
    transform: translateX(-50%) scaleX(1);
  }
}
@keyframes foot-ans {
  0% {
    transform: translate(-50%, 80%) rotate(0deg);
  }
  10% {
    transform: translate(-150%, 80%) rotate(10deg);
  }
  20% {
    transform: translate(-150%, 10%) rotate(10deg);
  }
  40% {
    transform: translate(400%, 10%) rotate(-20deg);
  }
  60% {
    transform: translate(600%, 60%) rotate(-20deg);
  }
  70% {
    transform: translate(500%, 60%) rotate(0deg);
  }
}
.duck__inner {
  animation: bird-up-down var(--duck-speed-half) linear infinite;
}

@keyframes bird-up-down {
  0%, 100% {
    transform: translateY(0.4rem);
  }
  50% {
    transform: translateY(0rem);
  }
}
@keyframes wing-animation {
  0%, 100% {
    transform: translate(0, -50%) rotate(16deg);
  }
  50% {
    transform: translate(0, -50%) rotate(-2deg);
  }
}
@keyframes eye-animation {
  0%, 20% {
    transform: scaleY(1);
  }
  10% {
    transform: scaleY(0);
  }
}
.cloud {
  position: absolute;
  top: 10vh;
  left: 0;
  width: 5rem;
  height: 3rem;
  border-radius: 6rem 6rem 0 1rem;
  background-color: white;
  transform: translateX(110vw);
  animation: cloud-animation-1 10s linear infinite;
}
.cloud--2, .cloud--4 {
  top: 20vh;
  transform: translateX(120vw) scale(0.8);
  animation: cloud-animation-2 10s 2.5s linear infinite;
}
.cloud--3 {
  animation-delay: 5s;
}
.cloud--4 {
  animation-delay: 7.5s;
}
.cloud::after {
  content: "";
  position: absolute;
  width: 6rem;
  height: 3.5rem;
  bottom: 0;
  border-radius: 6rem 10rem 1rem 0;
  transform: translateX(3rem);
  background-color: #fff;
}
.cloud::before {
  content: "";
  position: absolute;
  width: 4rem;
  height: 3rem;
  bottom: 2rem;
  border-radius: 10rem 10rem 0 0;
  transform: translateX(2rem);
  background-color: #fff;
}

@keyframes cloud-animation-1 {
  0% {
    transform: translate(110vw);
  }
  100% {
    transform: translateX(-50vw);
  }
}
@keyframes cloud-animation-2 {
  0% {
    transform: translateX(110vw) scale(0.8);
  }
  100% {
    transform: translateX(-50vw) scale(0.8);
  }
}
</style>
</head>
<body>
<!-- partial:index.partial.html -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Duck Walking Animation</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>

    <div class="cloud cloud--1"></div>
    <div class="cloud cloud--2"></div>
    <div class="cloud cloud--3"></div>
    <div class="cloud cloud--4"></div>


    <div class="duck__wrapper">
        <div class="duck">
            <div class="duck duck__inner">
                <div class="duck__mouth"></div>
                <div class="duck__head">
                    <div class="duck__eye"></div>
                    <div class="duck__eye--shadow"></div>
                    <div class="duck__white"></div>
                </div>
                <div class="duck__body"></div>
                <div class="duck__wing"></div>
            </div>
            <div class="duck__foot duck__foot--1"></div>
            <div class="duck__foot duck__foot--2"></div>
            <div class="surface"></div>
        </div>
    </div>


</body>

</html>
<!-- partial -->
  
</body>
</html>
